import os

import drake
import drake.cxx
import drake.cxx.boost

config = None
lib_static = None
lib_dynamic = None
library = None
headers = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None
rule_examples = None

def configure(cryptography,
              elle,
              reactor,
              cxx_toolkit = None,
              cxx_config = None,
              boost = None,
              stuntman = None,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = False,
):

  # Public C++ configuration
  global config
  config = drake.cxx.Config()
  config.standard = drake.cxx.Config.cxx_14
  lib_path = '../../../lib'

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  config += boost.config()

  # Elle
  config += elle.config

  # Reactor
  config += reactor.config

  # Cryptography
  config += cryptography.config

  # Local C++ configuration
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config.lib_path_runtime('.')
  local_cxx_config.enable_debug_symbols()
  local_cxx_config += config

  # # Boost libraries
  # local_cxx_config += boost.config_signals()
  # local_cxx_config += boost.config_system()
  # local_cxx_config += boost.config_thread()

  sources = drake.nodes(
    'ChanneledStream.hh',
    'RPC.hxx',
    'Stream.hh',
    'Serializer.hh',
    'Channel.cc',
    'RPC.hh',
    'ChanneledStream.cc',
    'Stream.cc',
    'Channel.hh',
    'Serializer.cc',
    'RPC.cc',
    'exceptions.cc',
    'exceptions.hh',
    'fwd.hh',
  )
  global lib_static, lib_dynamic, library
  from itertools import chain
  lib_static = drake.cxx.StaticLib(
    lib_path + '/elle_protocol',
    chain(sources, (elle.library, reactor.library, cryptography.library)),
    cxx_toolkit, local_cxx_config)
  lib_dynamic = drake.cxx.DynLib(
    lib_path + '/elle_protocol',
    chain(sources, (elle.library, reactor.library, cryptography.library)),
    cxx_toolkit, local_cxx_config)

  # Build
  global rule_build
  rule_build = drake.Rule('build')
  rule_build << lib_static
  if cxx_toolkit.os not in [drake.os.windows, drake.os.ios, drake.os.android]:
    rule_build << lib_dynamic
    library = lib_dynamic
  else:
    library = lib_static

  ## ----- ##
  ## Tests ##
  ## ----- ##

  global rule_check, rule_tests
  rule_check = drake.TestSuite('check')
  rule_tests = drake.Rule('tests')
  elle_tests_path = drake.Path('../../../tests')
  tests_path = elle_tests_path / 'elle/protocol'

  tests = [
    'serializer',
    'split',
    'stream',
  ]

  cxx_config_tests = drake.cxx.Config(local_cxx_config)
  cxx_config_tests.add_local_include_path(elle_tests_path)
  test_libs = [library, elle.library, reactor.library, cryptography.library]
  cxx_config_tests += boost.config_test(static = not boost.prefer_shared or None,
                                        link = not boost.prefer_shared)
  cxx_config_tests += boost.config_timer(static = not boost.prefer_shared or None,
                                         link = not boost.prefer_shared)
  cxx_config_tests += boost.config_system(static = not boost.prefer_shared or None,
                                          link = not boost.prefer_shared)
  cxx_config_tests += boost.config_thread(static = not boost.prefer_shared or None,
                                          link = not boost.prefer_shared)
  cxx_config_tests += boost.config_signals(static = not boost.prefer_shared or None,
                                           link = not boost.prefer_shared)
  if boost.prefer_shared:
    test_libs += [
      boost.test_dynamic,
      boost.timer_dynamic,
      boost.system_dynamic,
      boost.thread_dynamic,
      boost.signals_dynamic
    ]
  if cxx_toolkit.os == drake.os.android:
    cxx_config_tests.lib('stdc++')
    cxx_config_tests.lib('atomic')
  for name in tests:
    test = drake.cxx.Executable(
      '%s/%s' % (tests_path, name),
      [drake.node('%s/%s.cc' % (tests_path, name))] + test_libs,
      cxx_toolkit,
      cxx_config_tests,
    )
    rule_tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(
        exe = test,
        valgrind = valgrind,
        valgrind_args = ['--suppressions=%s' % (drake.path_source('../../../valgrind.suppr'))]
        )
    else:
      runner = drake.Runner(exe = test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  global headers
  headers = (node for node in sources if isinstance(node, drake.cxx.Header))

  if prefix is not False:
    global rule_install
    rule_install = drake.Rule('install')
    if cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(lib_static, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(
      headers,
      prefix / 'include' / 'elle' / 'protocol')
