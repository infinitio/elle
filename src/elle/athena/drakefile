import drake
import copy

rule_build = None
rule_check = None
rule_install = None
rule_tests = None
rule_examples = None
headers = None

lib_dynamic = None
lib_static  = None

config = None

def configure(cxx_toolkit,
              cxx_config,
              elle,
              das,
              reactor,
              cryptography,
              boost,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = True):

  global lib_dynamic, lib_static
  global rule_build, rule_check, rule_install, rule_tests
  global config

  ## ----------------- ##
  ## C++ configuration ##
  ## ----------------- ##

  config = elle.config + das.config + reactor.config + cryptography.config
  local_config = drake.cxx.Config(config) + cxx_config
  lib_path = '../../../lib'

  ## ------- ##
  ## Library ##
  ## ------- ##


  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    local_config += boost.config_system(static = True)
  else:
    local_config += boost.config_system(link = False)
    local_config.library_add(
      drake.copy(boost.system_dynamic, lib_path, strip_prefix = True))
  sources = drake.nodes(
    'LamportAge.hh',
    'paxos/Client.cc',
    'paxos/Client.hh',
    'paxos/Client.hxx',
    'paxos/Server.hh',
    'paxos/Server.hxx',
  )
  dependencies = [elle.library, reactor.library, cryptography.library]
  lib_dynamic = drake.cxx.DynLib(
    lib_path + '/elle_athena',
    sources + dependencies,
    cxx_toolkit, local_config)
  lib_static = drake.cxx.StaticLib(
    lib_path + '/elle_athena',
    sources + dependencies,
    cxx_toolkit, local_config)
  rule_build = drake.Rule('build')
  if cxx_toolkit.os in [
      drake.os.windows, drake.os.ios, drake.os.android]:
    library = lib_static
  else:
    library = lib_dynamic
  rule_build << library

  ## ----- ##
  ## Tests ##
  ## ----- ##

  rule_tests = drake.Rule('tests')
  rule_check = drake.TestSuite('check')
  elle_tests_path = drake.Path('../../../tests')
  tests_path = elle_tests_path / 'elle/athena'

  tests = [
    'paxos',
    'lamport-age'
  ]

  local_config_tests = drake.cxx.Config(local_config)
  local_config_tests.add_local_include_path(elle_tests_path)
  local_config_tests.enable_debug_symbols()
  test_libs = copy.copy(dependencies) + [library]
  local_config_tests += boost.config_test(
    static = not boost.prefer_shared or None,
    link = not boost.prefer_shared)
  local_config_tests += boost.config_timer(
    static = not boost.prefer_shared or None,
    link = not boost.prefer_shared)
  if boost.prefer_shared:
    test_libs += list(map(lambda x: drake.copy(x, lib_path, strip_prefix = True),
                          [boost.timer_dynamic, boost.test_dynamic]))
  local_config_tests.lib_path_runtime(
    drake.Path('../../..') / library.path().dirname())
  for name in tests:
    test = drake.cxx.Executable(
      '%s/%s' % (tests_path, name),
      [drake.node('%s/%s.cc' % (tests_path, name))] + test_libs,
      cxx_toolkit,
      local_config_tests)
    rule_tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(
        exe = test,
        valgrind_args = [
          '--suppressions=%s' % drake.path_source('../../../valgrind.suppr'),
        ],
      )
    else:
      runner = drake.Runner(test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  global headers
  headers = (node for node in sources if isinstance(node, drake.cxx.Header))

  if prefix is not False:
    rule_install = drake.Rule('install')
    if cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(lib_static, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(
      headers,
      prefix / 'include' / 'elle' / 'athena')
