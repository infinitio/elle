import drake

rule_build = None
rule_check = None
rule_tests = None
rule_examples = None

lib_dynamic = None
lib_static  = None

config = None

def configure(cxx_toolkit,
              cxx_config,
              elle,
              das,
              reactor,
              boost,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = True):

  global lib_dynamic, lib_static
  global rule_build, rule_check, rule_tests, rule_examples
  global config

  ## ----------------- ##
  ## C++ configuration ##
  ## ----------------- ##

  config = elle.config + das.config + reactor.config
  config.add_local_include_path('src')
  local_config = drake.cxx.Config(config) + cxx_config
  lib_path = '../../../../lib'

  ## ------- ##
  ## Library ##
  ## ------- ##

  elle_lib = elle.lib_dynamic
  sources = drake.nodes(
    'Dropbox.cc',
    'Dropbox.hh',
  )
  lib_dynamic = drake.cxx.DynLib(lib_path + '/elle_dropbox',
                                 sources + [elle_lib],
                                 cxx_toolkit, local_config)
  lib_static = drake.cxx.StaticLib(lib_path + '/elle_dropbox',
                                   sources,
                                   cxx_toolkit, local_config)
  rule_build = drake.Rule('build')
  rule_build << lib_dynamic
  rule_build << lib_static

  ## ------- ##
  ## Install ##
  ## ------- ##

  global headers
  headers = (node for node in sources if isinstance(node, drake.cxx.Header))

  if prefix is not False:
    global rule_install
    rule_install = drake.Rule('install')
    if cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(lib_static, prefix / 'lib', strip_prefix = True)
    rule_install << drake.install(
      headers,
      prefix / 'include' / 'elle' / 'service' / 'dropbox')
