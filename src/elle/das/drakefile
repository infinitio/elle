# -*- Python -*-

import drake
import copy
import os

rule_build = None
rule_check = None
rule_install = None
rule_tests = None
rule_examples = None

examples = None
config = None

def configure(cxx_toolkit,
              cxx_config,
              elle,
              boost,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = True):

  global rule_install, rule_build, rule_check, rule_tests
  global config, examples

  ## ----------------- ##
  ## C++ configuration ##
  ## ----------------- ##

  rule_build = drake.Rule('build')
  config = drake.cxx.Config(elle.config)
  local_config = drake.cxx.Config(config) + cxx_config
  local_config.warnings.parentheses = False
  lib_path = '../../../lib'

  ## ------ ##
  ## Libdas ##
  ## ------ ##

  sources = drake.nodes(
    'Symbol.hh',
    'Symbol.hxx',
    'flatten.hh',
    'fwd.hh',
    'cli.hh',
    'model.hh',
    'named.hh',
    'printer.hh',
    'serializer.hh',
    'serializer.hxx',
    'tuple.hh',
  )

  ## ----- ##
  ## Tests ##
  ## ----- ##

  rule_tests = drake.Rule('tests')
  rule_check = drake.TestSuite('check')
  elle_tests_path = drake.Path('../../../tests')
  tests_path = elle_tests_path / 'elle/das'

  tests = [
    'cli',
    'flatten',
    'named',
    'printer',
    'serialize',
    'symbol',
    'tuple',
  ]

  config_tests = drake.cxx.Config(local_config)
  config_tests.add_local_include_path(elle_tests_path)
  test_libs = [elle.library]
  config_tests += boost.config_test(
    static = not boost.prefer_shared or None,
    link = not boost.prefer_shared)
  config_tests += boost.config_timer(
    static = not boost.prefer_shared or None,
    link = not boost.prefer_shared)
  if boost.prefer_shared:
    test_libs += [boost.timer_dynamic, boost.test_dynamic]
  if cxx_toolkit.os is drake.os.android:
    config_tests.lib('stdc++')
    config_tests.lib('atomic')
  for name in tests:
    test = drake.cxx.Executable(
      tests_path / name,
      [drake.node(tests_path / ('%s.cc' % name))] + test_libs,
      cxx_toolkit,
      config_tests)
    rule_tests << test
    runner = drake.Runner(test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  ## -------- ##
  ## Examples ##
  ## -------- ##

  rule_examples = drake.Rule('examples')
  examples_path = drake.Path('../../../examples')
  examples = [
    'samples/elle/das/das'
  ]
  config_examples = drake.cxx.Config(local_config)
  example_libs = [elle.library]
  for example in examples:
    if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
      config_examples += boost.config_date_time(static = True)
    else:
      example_libs += [boost.date_time_dynamic]
      example_libs = list(map(lambda l: drake.copy(l, examples_path / 'lib', strip_prefix = True),
                              example_libs))
    rule_examples << drake.cxx.Executable(
      example,
      [drake.node('%s/%s.cc' % (examples_path, example))] + example_libs,
      cxx_toolkit, config_examples)
  rule_build << rule_examples

  ## ------- ##
  ## Install ##
  ## ------- ##

  if prefix is not False:
    rule_install = drake.Rule('install')
    rule_install << drake.install(
      (node for node in sources if isinstance(node, drake.cxx.Header)),
      prefix / 'include' / 'elle' / 'das')
