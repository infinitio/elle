import os

import drake
import drake.cxx
import drake.cxx.boost

config = None
lib_static = None
lib_dynamic = None
library = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

def configure(cryptography,
              elle,
              reactor,
              cxx_toolkit = None,
              cxx_config = None,
              boost = None,
              stuntman = None,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = False,
):

  # Public C++ configuration
  global config
  config = drake.cxx.Config()
  config.add_local_include_path('src')
  config.standard = drake.cxx.Config.cxx_14

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  config += boost.config()

  # Elle
  config += elle.config
  elle_library = drake.copy(elle.library, 'lib', strip_prefix = True)

  # Reactor
  config += reactor.config
  reactor_library = drake.copy(reactor.library, 'lib',
                               strip_prefix = True)

  # Cryptography
  config += cryptography.config
  cryptography_library = drake.copy(cryptography.library, 'lib',
                                    strip_prefix = True)

  # Local C++ configuration
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config.lib_path_runtime('.')
  local_cxx_config.enable_debug_symbols()
  local_cxx_config += config

  # # Boost libraries
  # local_cxx_config += boost.config_signals()
  # local_cxx_config += boost.config_system()
  # local_cxx_config += boost.config_thread()

  sources = drake.nodes(
    'src/protocol/ChanneledStream.hh',
    'src/protocol/RPC.hxx',
    'src/protocol/Stream.hh',
    'src/protocol/Serializer.hh',
    'src/protocol/Channel.cc',
    'src/protocol/RPC.hh',
    'src/protocol/ChanneledStream.cc',
    'src/protocol/Stream.cc',
    'src/protocol/Channel.hh',
    'src/protocol/Serializer.cc',
    'src/protocol/RPC.cc',
    'src/protocol/exceptions.cc',
    'src/protocol/exceptions.hh',
    'src/protocol/fwd.hh',
  )
  global lib_static, lib_dynamic, library
  from itertools import chain
  lib_static = drake.cxx.StaticLib(
    'lib/protocol',
    chain(sources, (elle_library, reactor_library, cryptography_library)),
    cxx_toolkit, local_cxx_config)
  lib_dynamic = drake.cxx.DynLib(
    'lib/protocol',
    chain(sources, (elle_library, reactor_library, cryptography_library)),
    cxx_toolkit, local_cxx_config)

  # Build
  global rule_build
  rule_build = drake.Rule('build')
  rule_build << lib_static
  if cxx_toolkit.os not in [drake.os.ios, drake.os.android]:
    rule_build << lib_dynamic
    library = lib_dynamic
  else:
    library = lib_static

  # Tests
  global rule_check, rule_tests
  rule_check = drake.TestSuite('check')
  rule_tests = drake.Rule('tests')

  tests = [
    'rpc',
    'serializer',
    ]

  cxx_config_tests = drake.cxx.Config(local_cxx_config)
  if cxx_toolkit.os == drake.os.android:
    cxx_config_tests.lib('stdc++')
    cxx_config_tests.lib('atomic')
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    cxx_config_tests += boost.config_test(static = True)
    cxx_config_tests += boost.config_system(static = True)
    cxx_config_tests += boost.config_thread(static = True)
    cxx_config_tests += boost.config_signals(static = True)
  else:
    cxx_config_tests += boost.config_test(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))
    cxx_config_tests += boost.config_system(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.system_dynamic, 'lib', strip_prefix = True))
    cxx_config_tests += boost.config_thread(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.thread_dynamic, 'lib', strip_prefix = True))
    cxx_config_tests += boost.config_signals(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.signals_dynamic, 'lib', strip_prefix = True))
  cxx_config_tests.lib_path_runtime('../lib')
  for name in tests:
    test = drake.cxx.Executable(
      'tests/%s' % name,
      (
        drake.node('tests/%s.cc' % name),
        library,
        elle_library,
        reactor_library,
        cryptography_library,
        # cryptography.openssl_lib_crypto,
        # cryptography.openssl_lib_ssl,
      ),
      cxx_toolkit,
      cxx_config_tests,
    )
    rule_tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(
        exe = test,
        valgrind = valgrind,
        valgrind_args = ['--suppressions=%s' % (drake.path_source('../valgrind.suppr'))]
        )
    else:
      runner = drake.Runner(exe = test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  if prefix is not False:
    global rule_install
    rule_install = drake.Rule('install')
    if cxx_toolkit.os not in [drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix)
    rule_install << drake.install(lib_static, prefix)
    rule_install << drake.install(
      (node for node in sources if isinstance(node, drake.cxx.Header)),
      prefix / 'include', 'src')
