import drake
import drake.cxx
import drake.cxx.boost
import drake.templating
import sys

config = None
lib_static = None
lib_dynamic = None
library = None
python_lib = None
dokan_lib = None
cxx_lib = None
connectivity = None

library_coroutine = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

asio_udt_lib = None

with open(str(drake.path_source('../drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())


def configure(curl_config,
              curl_lib,
              zlib_config,
              zlib_lib,
              cxx_toolkit,
              cxx_config,
              boost,
              openssl_config,
              openssl_lib_crypto,
              openssl_lib_ssl,
              python3 = None,
              elle = None,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = False,
              archs = [],
              fuse = None,
              codesign = False,
):

  global asio_udt_lib
  global config, lib_static, lib_dynamic, library, cxx_lib
  global rule_build, rule_install
  global python_lib, dokan_lib
  global connectivity

  if cxx_toolkit.os is drake.os.macos:
    global osxfuse_package

  # Public C++ configuration
  config = drake.cxx.Config()
  config.add_local_include_path('src')
  config.standard = drake.cxx.Config.cxx_14
  config.lib_path('lib')

  # Local C++ configuration
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config += config
  local_cxx_config.lib_path_runtime('.')
  local_cxx_config.enable_debug_symbols()

  # Lib coroutine
  libcoroutine = None
  if cxx_toolkit.os in [drake.os.windows]:
    libcoroutine_sources = drake.nodes(
      'src/reactor/backend/coro_io/libcoroutine/asm.S',
      'src/reactor/backend/coro_io/libcoroutine/context.cc',
      'src/reactor/backend/coro_io/libcoroutine/coroutine.cc',
      'src/reactor/backend/coro_io/libcoroutine/coroutine.hh',
    )
    libcoroutine_cxx_config = drake.cxx.Config(local_cxx_config)
    libcoroutine_cxx_config.warnings.missing_declarations = None
    if valgrind is not None:
      libcoroutine_cxx_config.define('USE_VALGRIND')
    libcoroutine = drake.cxx.StaticLib('lib/reactor/coroutine',
                                       libcoroutine_sources,
                                       cxx_toolkit,
                                       libcoroutine_cxx_config)
    library_coroutine = libcoroutine

  # Libcxabi through llvm
  if cxx_toolkit.os in [drake.os.macos, drake.os.ios] and cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
    build_libcxxabi = drake.Rule("libcxxabi")
    llvm_url = 'http://llvm.org/releases/3.5.1/llvm-3.5.1.src.tar.xz'
    libcxx_url = 'http://llvm.org/releases/3.5.1/libcxx-3.5.1.src.tar.xz'
    libcxxabi_url = 'http://llvm.org/releases/3.5.1/libcxxabi-3.5.1.src.tar.xz'
    llvm_tarball = drake.node('llvm/llvm-3.5.1.src.tar.xz')
    libcxx_tarball = drake.node('llvm/libcxx-3.5.1.src.tar.xz')
    libcxxabi_tarball = drake.node('llvm/libcxxabi-3.5.1.src.tar.xz')
    drake.HTTPDownload(llvm_url , llvm_tarball,
                       fingerprint='2d3d8004f38852aa679e5945b8ce0b14')
    drake.HTTPDownload(libcxx_url , libcxx_tarball,
                       fingerprint='406f09b1dab529f3f7879f4d548329d2')
    drake.HTTPDownload(libcxxabi_url , libcxxabi_tarball,
                       fingerprint='b22c707e8d474a99865ad3c521c3d464')
    drake.TarballExtractor(
        llvm_tarball,
        targets = ['llvm-3.5.1.src/configure'],
        )
    drake.TarballExtractor(
        libcxx_tarball,
        targets = ['libcxx-3.5.1.src/CMakeLists.txt'],
        )
    # Patch CMakeLists.txt to more recent version for llvm detection
    libcxxabi_patches = [(drake.node('libcxxabi2.patch'),0)]
    if cxx_toolkit.os in [drake.os.macos, drake.os.ios]: # pass --unused dyn_lookup to linker
        libcxxabi_patches.append((drake.node('libcxxabi.patch'),0))
    drake.TarballExtractor(
        libcxxabi_tarball,
        targets = ['libcxxabi-3.5.1.src/CMakeLists.txt'],
        patches = libcxxabi_patches,
        patch_dir = 'libcxxabi-3.5.1.src'
      )
    #invoke cmake
    if cxx_toolkit.os is drake.os.ios and archs:
      libcxxabi_libs = []
      libcxx_libs = []
      for arch in archs:
        build = 'build_%s' % arch
        drake.ShellCommand(
          drake.nodes('llvm/libcxxabi-3.5.1.src/CMakeLists.txt',
            'llvm/llvm-3.5.1.src/configure',
            'llvm/libcxx-3.5.1.src/CMakeLists.txt'
            ),
          drake.nodes('llvm/libcxxabi-3.5.1.src/'+build+'/CMakeCache.txt'),
            [
             'cmake', '..',
             '-DCMAKE_CXX_COMPILER=clang++',
             '-DCMAKE_C_COMPILER=clang',
             '-DCMAKE_CXX_FLAGS=-arch %s -mios-version-min=7.1' % arch,
             '-DCMAKE_C_FLAGS=-arch %s -mios-version-min=7.1' % arch,
             '-DLLVM_PATH=%s' % (drake.path_build('llvm/llvm-3.5.1.src', True)),
             '-DLLVM_ENABLE_LIBCXX=ON',
             '-DLIBCXXABI_ENABLE_SHARED=OFF',
             '-DLIBCXXABI_LIBCXX_PATH=%s' % (drake.path_build('llvm/libcxx-3.5.1.src', True))
            ],
            True,
            drake.path_build('llvm/libcxxabi-3.5.1.src/' + build),
        )
        libcxxabi_lib = cxx_toolkit.libname_static(None,'llvm/libcxxabi-3.5.1.src/'+build+'/lib/c++abi')
        libcxxabi_lib = drake.path_build(libcxxabi_lib, True)
        libcxxabi_libs.append(drake.node(libcxxabi_lib))
        #invoke make
        drake.ShellCommand(
          drake.nodes('llvm/libcxxabi-3.5.1.src/'+build+'/CMakeCache.txt'),
          drake.nodes(libcxxabi_lib),
          ['make'],
          True,
          drake.path_build('llvm/libcxxabi-3.5.1.src/' + build),
          )
        # Under ios we cannot link with our own dylib,
        # So we can't override libc++.dylib as we do on macos.
        # So build our own static libc++ so we can stop linking to the system
        # one altogether
        drake.ShellCommand(
          drake.nodes('llvm/libcxx-3.5.1.src/CMakeLists.txt',
            'llvm/llvm-3.5.1.src/configure',
            'llvm/libcxx-3.5.1.src/CMakeLists.txt'
            ),
          drake.nodes('llvm/libcxx-3.5.1.src/'+build+'/CMakeCache.txt'),
            [
             'cmake', '..',
             '-DCMAKE_CXX_COMPILER=clang++',
             '-DCMAKE_C_COMPILER=clang',
             '-DCMAKE_CXX_FLAGS=-arch %s -mios-version-min=7.1' % arch,
             '-DCMAKE_C_FLAGS=-arch %s -mios-version-min=7.1' % arch,
             '-DLLVM_PATH=%s' % (drake.path_build('llvm/llvm-3.5.1.src', True)),
             '-DLLVM_ENABLE_LIBCXX=ON',
             '-DLIBCXX_ENABLE_SHARED=OFF',
             ],
            True,
            drake.path_build('llvm/libcxx-3.5.1.src/' + build),
        )
        libcxx_lib = cxx_toolkit.libname_static(None,'llvm/libcxx-3.5.1.src/'+build+'/lib/c++')
        libcxx_lib = drake.path_build(libcxx_lib, True)
        libcxx_libs.append(drake.node(libcxx_lib))
        #make
        drake.ShellCommand(
          drake.nodes('llvm/libcxx-3.5.1.src/'+build+'/CMakeCache.txt'),
          drake.nodes(libcxx_lib),
          ['make'],
          True,
          drake.path_build('llvm/libcxx-3.5.1.src/' + build),
          )
      libcxxabi_lib = cxx_toolkit.libname_static(None, 'lib/c++abi')
      libcxxabi_lib = drake.path_build(libcxxabi_lib, True)
      FatLibraryGenerator(libcxxabi_libs, drake.node(libcxxabi_lib))
      libcxx_lib = drake.path_build('lib/libc++.a', True)
      FatLibraryGenerator(libcxx_libs, drake.node(libcxx_lib))
      build_libcxxabi << drake.node(libcxxabi_lib)
      build_libcxxabi << drake.node(libcxx_lib)
    else:
      drake.ShellCommand(
        drake.nodes('llvm/libcxxabi-3.5.1.src/CMakeLists.txt',
          'llvm/llvm-3.5.1.src/configure',
          'llvm/libcxx-3.5.1.src/CMakeLists.txt'
          ),
        drake.nodes('llvm/libcxxabi-3.5.1.src/build/CMakeCache.txt'),
        [
         'cmake', '..',
         '-DCMAKE_CXX_COMPILER=clang++',
         '-DLLVM_PATH=%s' % (drake.path_build('llvm/llvm-3.5.1.src', True)),
         '-DLLVM_ENABLE_LIBCXX=ON',
         '-DLIBCXXABI_LIBCXX_PATH=%s' % (drake.path_build('llvm/libcxx-3.5.1.src', True))
        ],
        True,
        drake.path_build('llvm/libcxxabi-3.5.1.src/build/'),
        )
      libcxxabi_lib = cxx_toolkit.libname_dyn('llvm/libcxxabi-3.5.1.src/build/lib/c++abi')
      libcxxabi_lib = drake.path_build(libcxxabi_lib, True)
      #invoke make
      drake.ShellCommand(
        drake.nodes('llvm/libcxxabi-3.5.1.src/build/CMakeCache.txt'),
        drake.nodes(libcxxabi_lib),
        ['make'],
        True,
        drake.path_build('llvm/libcxxabi-3.5.1.src/build/'),
        )
      build_libcxxabi << drake.nodes(libcxxabi_lib)


  if cxx_toolkit.os in [drake.os.macos, drake.os.ios] and cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
    # Every lib/bin links to /usr/lib/libc++.dylib, which itself refers /usr/lib/libc++abi.dylib.
    # So we need to copy and patch libc++.dylib
    def rpath_libcxx(tgt):
      with drake.WritePermissions(drake.node(tgt)):
        return drake.command([
            'install_name_tool',
            '-change',
            '/usr/lib/libc++abi.dylib',
            '@rpath/libc++abi.dylib',
            '-id',
            '@rpath/libc++.1.dylib',
            str(drake.path_build(tgt, True))
            ])
    def rpath_libcxxabi(tgt):
      with drake.WritePermissions(drake.node(tgt)):
        return drake.command(
                    ['install_name_tool', '-id',
                     '@rpath/libc++abi.dylib',
                     str(drake.path_build(tgt, True))
                    ])
    lib_cxx = drake.copy(drake.nodes('/usr/lib/libc++.1.dylib'), 'lib', strip_prefix = True,
      post_process = rpath_libcxx)
    lib_cxx_abi = drake.copy(drake.nodes(libcxxabi_lib), 'lib', strip_prefix = True,
      post_process = rpath_libcxxabi)
    cxx_libs = lib_cxx + lib_cxx_abi
  else:
    cxx_libs = []

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  local_cxx_config += boost.config()
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    local_cxx_config += boost.config_signals(static = True)
    local_cxx_config += boost.config_system(static = True)
    local_cxx_config += boost.config_thread(static = True)
    if cxx_toolkit.os != drake.os.windows:
      # windows uses coro io
      local_cxx_config += boost.config_context(static = True)
  else:
    local_cxx_config += boost.config_context(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.context_dynamic, 'lib', strip_prefix = True, post_process = set_local_libcxx(cxx_toolkit)))
    local_cxx_config += boost.config_signals(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.signals_dynamic, 'lib', strip_prefix = True, post_process = set_local_libcxx(cxx_toolkit)))
    local_cxx_config += boost.config_system(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.system_dynamic, 'lib', strip_prefix = True, post_process = set_local_libcxx(cxx_toolkit)))
    local_cxx_config += boost.config_thread(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.thread_dynamic, 'lib', strip_prefix = True, post_process = set_local_libcxx(cxx_toolkit)))

  # FUSE
  fuse_lib = None
  dokan_lib = None
  if fuse is None:
    if cxx_toolkit.os is drake.os.linux:
      fuse_version = '2.9.4'
      fuse_version_us = fuse_version.replace(".", "_")
      fuse_basename = 'fuse-%s' % fuse_version
      fuse_url = \
        'https://github.com/libfuse/libfuse/releases/download/' \
        'fuse_%s/%s.tar.gz' % (fuse_version_us, fuse_basename)
      fuse_tarball = \
        drake.node('fuse/%s.tar.gz' % fuse_basename)
      fuse_configure = \
        drake.node('fuse/%s/configure' % fuse_basename)
      fuse_prefix = drake.path_build('fuse')
      fuse_prefix_absolute = drake.path_root() / fuse_prefix
      fuse_lib =  drake.cxx.DynLib('fuse/lib/libfuse.so.2')
      fuse_includes = drake.nodes(
        'fuse/include/fuse/cuse_lowlevel.h',
        'fuse/include/fuse/fuse_common_compat.h',
        'fuse/include/fuse/fuse_common.h',
        'fuse/include/fuse/fuse_compat.h',
        'fuse/include/fuse/fuse.h',
        'fuse/include/fuse/fuse_lowlevel_compat.h',
        'fuse/include/fuse/fuse_lowlevel.h',
        'fuse/include/fuse/fuse_opt.h'
        )
      drake.HTTPDownload(fuse_url, fuse_tarball,
                         fingerprint='ecb712b5ffc6dffd54f4a405c9b372d8')
      drake.TarballExtractor(
        fuse_tarball,
        targets = ['%s/configure' % fuse_basename],
        patches = [(drake.node('fuse.patch'), 1),],
        patch_dir = fuse_basename
      )
      GNUBuilder(
        cxx_toolkit,
        configure = fuse_configure,
        configure_args = [
        '--prefix=%s' % fuse_prefix_absolute,
        'CXX=%s' % cxx_toolkit.cxx,
        '--disable-util',
        '--disable-example',
        '--disable-static',
        '--enable-shared'
        ],
        targets = [fuse_lib] + fuse_includes,
      )
      fuse_config = drake.cxx.Config()
      fuse_config.add_local_include_path('fuse/include')
      local_cxx_config += fuse_config
      fuse_lib = drake.copy(fuse_lib, 'lib', strip_prefix = True)
    elif cxx_toolkit.os is drake.os.macos:
      osxfuse_version = drake.Version(3, 2, 0)
      osxfuse_base_name = 'osxfuse-%s' % osxfuse_version
      osxfuse_url = 'https://github.com/osxfuse/osxfuse/releases/download'\
        '/%(name)s/%(name)s.dmg' % {'name': osxfuse_base_name}
      osxfuse_dmg = drake.node('osxfuse/%s.dmg' % osxfuse_base_name)
      drake.HTTPDownload(
        osxfuse_url,
        osxfuse_dmg,
        fingerprint = '028cb3f6edf6d7dea3bc8d4b4f426cfb',
      )
      osxfuse_package = drake.node('osxfuse/%s.pkg' % osxfuse_base_name)
      fuse_includes = drake.nodes(
        'osxfuse/fuse/include/cuse_lowlevel.h',
        'osxfuse/fuse/include/fuse_common_compat.h',
        'osxfuse/fuse/include/fuse_common.h',
        'osxfuse/fuse/include/fuse_compat.h',
        'osxfuse/fuse/include/fuse.h',
        'osxfuse/fuse/include/fuse_lowlevel_compat.h',
        'osxfuse/fuse/include/fuse_lowlevel.h',
        'osxfuse/fuse/include/fuse_opt.h'
        )
      fuse_includes = drake.copy(
        fuse_includes, 'osxfuse/include/fuse', strip_prefix = True)
      fuse_config = drake.cxx.Config()
      fuse_config.add_local_include_path('osxfuse/include')
      local_cxx_config += fuse_config

      class OSXFUSEExtractor(drake.Builder):
        def __init__(self, version, dmg, target):
          self.__version = version
          self.__dmg = dmg
          self.__destination = target
          import tempfile
          self.__mountpoint = tempfile.mkdtemp()
          drake.Builder.__init__(self, [self.__dmg], [target])

        def execute(self):
          self.cmd('Mount DMG: %s' % self.__dmg,
          [
            'hdiutil', 'attach', '-noautoopen',
            '-mountpoint', self.__mountpoint,
            self.__dmg,
          ])
          self.cmd('Copy .pkg',
          [
            'cp',
            '%s/Extras/FUSE for OS X %s.pkg' % \
              (self.__mountpoint, self.__version),
            self.__destination,
          ])
          self.cmd('Unmount DMG: %s' % self.__dmg,
          [
            'hdiutil', 'detach', self.__mountpoint,
          ])
          import shutil
          shutil.rmtree(self.__mountpoint)
          return True

      OSXFUSEExtractor(osxfuse_version, osxfuse_dmg, osxfuse_package)
      fuse_lib = drake.cxx.DynLib('/usr/local/lib/libosxfuse.2.dylib')

  elif fuse:
    fuse_config = drake.cxx.Config()
    fuse_config.add_local_include_path('%s/include/osxfuse' % fuse)
    local_cxx_config += fuse_config
    fuse_lib = drake.cxx.DynLib('%s/lib/libosxfuse.2.dylib' % fuse)


  # Curl
  local_cxx_config += curl_config
  curl_lib = drake.copy(curl_lib, 'lib', strip_prefix = True)

  # OpenSSL (for SSL sockets)
  local_cxx_config += openssl_config
  openssl_libs = drake.copy([openssl_lib_ssl, openssl_lib_crypto],
                            'lib', strip_prefix = True)


  # Zlib
  local_cxx_config += zlib_config
  zlib_lib = drake.copy(zlib_lib, 'lib', strip_prefix = True)

  # Elle
  elle = elle or drake.include('../elle')
  local_cxx_config += elle.config
  elle_lib = drake.copy(elle.library, 'lib', strip_prefix = True, post_process = set_local_libcxx(cxx_toolkit))

  # miniupnpc
  miniupnp = drake.include('miniupnp', cxx_toolkit, archs = archs)
  miniupnpc = miniupnp.miniupnpc
  local_cxx_config += miniupnpc.config

  # UTP
  utp = drake.include('libutp', cxx_toolkit, archs = archs)
  utp_lib = utp.library

  # Build
  rule_build = drake.Rule('build')

  # UDT
  #asio_udt = drake.include('asio-udt', cxx_toolkit, cxx_config, boost = boost)
  #asio_udt_lib = drake.copy(asio_udt.library, '', 'asio-udt')
  #udt_lib = drake.copy(asio_udt.udt.library, '', 'asio-udt/udt')

  # Asio-FS
  # asio_fs = drake.include('asio-fs', cxx_toolkit, cxx_config, boost = boost)
  # asio_fs_lib = drake.copy(asio_fs.library_dynamic, '', 'asio-fs')
  # config += asio_fs.config

  sources = drake.nodes(
    'src/reactor/BackgroundOperation.hh',
    'src/reactor/BackgroundOperation.hxx',
    'src/reactor/Barrier.cc',
    'src/reactor/Barrier.hh',
    'src/reactor/Channel.hh',
    'src/reactor/FDStream.cc',
    'src/reactor/FDStream.hh',
    'src/reactor/Generator.cc',
    'src/reactor/Generator.hh',
    'src/reactor/Generator.hxx',
    'src/reactor/MultiLockBarrier.cc',
    'src/reactor/MultiLockBarrier.hh',
    'src/reactor/OrWaitable.cc',
    'src/reactor/OrWaitable.hh',
    'src/reactor/Scope.cc',
    'src/reactor/Scope.hh',
    'src/reactor/TimeoutGuard.cc',
    'src/reactor/TimeoutGuard.hh',
    'src/reactor/asio.hh',
    'src/reactor/exception.cc',
    'src/reactor/exception.hh',
    'src/reactor/fsm/CatchTransition.cc',
    'src/reactor/fsm/CatchTransition.hh',
    'src/reactor/fsm/EndTransition.cc',
    'src/reactor/fsm/EndTransition.hh',
    'src/reactor/fsm/Machine.cc',
    'src/reactor/fsm/Machine.hh',
    'src/reactor/fsm/Machine.hxx',
    'src/reactor/fsm/State.cc',
    'src/reactor/fsm/State.hh',
    'src/reactor/fsm/Transition.cc',
    'src/reactor/fsm/Transition.hh',
    'src/reactor/fsm/WaitableTransition.cc',
    'src/reactor/fsm/WaitableTransition.hh',
    'src/reactor/fsm/fwd.hh',
    'src/reactor/fwd.hh',
    'src/reactor/lockable.cc',
    'src/reactor/lockable.hh',
    'src/reactor/logger.cc',
    'src/reactor/logger.hh',
    'src/reactor/mutex.cc',
    'src/reactor/mutex.hh',
    'src/reactor/network/Protocol.cc',
    'src/reactor/network/Protocol.hh',
    'src/reactor/network/SocketOperation.cc',
    'src/reactor/network/SocketOperation.hh',
    'src/reactor/network/buffer.hh',
    'src/reactor/network/exception.cc',
    'src/reactor/network/exception.hh',
    'src/reactor/network/fingerprinted-socket.cc',
    'src/reactor/network/fingerprinted-socket.hh',
    'src/reactor/network/fwd.hh',
    'src/reactor/network/proxy.cc',
    'src/reactor/network/proxy.hh',
    'src/reactor/network/rdv-socket.cc',
    'src/reactor/network/rdv-socket.hh',
    'src/reactor/network/rdv.hh',
    'src/reactor/network/resolve.cc',
    'src/reactor/network/resolve.hh',
    'src/reactor/network/server.cc',
    'src/reactor/network/server.hh',
    'src/reactor/network/socket.cc',
    'src/reactor/network/socket.hh',
    'src/reactor/network/ssl-server.cc',
    'src/reactor/network/ssl-server.hh',
    'src/reactor/network/ssl-socket.cc',
    'src/reactor/network/ssl-socket.hh',
    'src/reactor/network/ssl-socket.hh',
    'src/reactor/network/tcp-server.cc',
    'src/reactor/network/tcp-server.hh',
    'src/reactor/network/tcp-socket.cc',
    'src/reactor/network/tcp-socket.hh',
    'src/reactor/network/udp-socket.cc',
    'src/reactor/network/udp-socket.hh',
    'src/reactor/network/upnp.cc',
    'src/reactor/network/upnp.hh',
    'src/reactor/network/utp-socket.cc',
    'src/reactor/network/utp-socket.hh',
    'src/reactor/operation.cc',
    'src/reactor/operation.hh',
    'src/reactor/rw-mutex.cc',
    'src/reactor/rw-mutex.hh',
    'src/reactor/scheduler.cc',
    'src/reactor/scheduler.hh',
    'src/reactor/semaphore.cc',
    'src/reactor/semaphore.hh',
    'src/reactor/signal.cc',
    'src/reactor/signal.hh',
    'src/reactor/signals.hh',
    'src/reactor/sleep.cc',
    'src/reactor/sleep.hh',
    'src/reactor/storage.cc',
    'src/reactor/storage.hh',
    'src/reactor/thread.cc',
    'src/reactor/thread.hh',
    'src/reactor/timer.cc',
    'src/reactor/timer.hh',
    'src/reactor/waitable.cc',
    'src/reactor/waitable.hh',
    # 'src/reactor/backend/pthread/pthread.cc',
    # 'src/reactor/backend/pthread/pthread.hh',
    # 'src/reactor/fs/File.cc',
    # 'src/reactor/fs/File.hh',
    # 'src/reactor/network/nat.cc',
    # 'src/reactor/network/nat.hh',
    # 'src/reactor/network/udt-rdv-server.cc',
    # 'src/reactor/network/udt-rdv-server.hh',
    # 'src/reactor/network/udt-server.cc',
    # 'src/reactor/network/udt-server.hh',
    # 'src/reactor/network/udt-socket.cc',
    # 'src/reactor/network/udt-socket.hh',
    )
  sources += drake.nodes(
    'src/reactor/filesystem.hh',
    'src/reactor/filesystem.cc',
    'src/reactor/filesystem_journal.cc',
  )
  if cxx_toolkit.os in [drake.os.linux, drake.os.macos]:
    sources += drake.nodes(
      'src/reactor/fuse.hh',
      'src/reactor/fuse.cc',
      'src/reactor/filesystem_fuse.cc',
      'src/reactor/pthread.hh',
      'src/reactor/pthread.cc',
      )
  else:
    dokan = drake.include('dokany', cxx_toolkit, cxx_config)
    sources += drake.nodes(
      'src/reactor/fuse.hh',
      'src/reactor/filesystem_dokanx.cc'
      )
    local_cxx_config += dokan.config
    dokan_lib = dokan.lib_dynamic

  sources += drake.nodes(
    'src/reactor/http/Client.cc',
    'src/reactor/http/Client.hh',
    'src/reactor/http/EscapedString.cc',
    'src/reactor/http/EscapedString.hh',
    'src/reactor/http/Method.cc',
    'src/reactor/http/Method.hh',
    'src/reactor/http/Request.cc',
    'src/reactor/http/Request.hh',
    'src/reactor/http/Service.cc',
    'src/reactor/http/Service.hh',
    'src/reactor/http/StatusCode.cc',
    'src/reactor/http/StatusCode.hh',
    'src/reactor/http/url.hh',
    'src/reactor/http/url.cc',
    'src/reactor/http/Version.cc',
    'src/reactor/http/Version.hh',
    'src/reactor/http/exceptions.cc',
    'src/reactor/http/exceptions.hh',
  )

  lib_cxx_config = drake.cxx.Config(local_cxx_config)

  backend = drake.cxx.StaticLib(
    'lib/reactor/backend',
    drake.nodes(
      'src/reactor/backend/backend.cc',
      'src/reactor/backend/backend.hh',
    ),
    cxx_toolkit,
    lib_cxx_config,
  )

  if libcoroutine is not None:
    backend_coro_io = drake.cxx.StaticLib(
      'lib/reactor/backend_coro_io',
      drake.nodes(
        'src/reactor/backend/coro_io/backend.cc',
        'src/reactor/backend/coro_io/backend.hh',
      ) + [backend, libcoroutine],
      cxx_toolkit,
      lib_cxx_config,
    )
  else:
    backend_coro_io = None

  lib_cxx_config.add_local_include_path('libutp')
  backend_boost_context_cxx_config = drake.cxx.Config(lib_cxx_config)
  backend_boost_context = drake.cxx.StaticLib(
    'lib/reactor/backend_boost_context',
    drake.nodes(
      'src/reactor/backend/boost_context/backend.cc',
      'src/reactor/backend/boost_context/backend.hh',
    ),
    cxx_toolkit,
    backend_boost_context_cxx_config,
  )
  lib_dynamic_link_libs = [
    curl_lib,
    elle_lib,
    miniupnpc.library,
    utp_lib,
  ]
  lib_static_link_libs = [
    curl_lib,
    elle.lib_static,
    miniupnpc.library,
    utp_lib,
  ]
  if backend_coro_io is not None:
    lib_dynamic_link_libs.append(backend_coro_io)
    lib_static_link_libs.append(backend_coro_io)
  else:
    lib_dynamic_link_libs.append(backend_boost_context)
    lib_dynamic_link_libs.append(backend)
    lib_static_link_libs.append(backend_boost_context)
    lib_static_link_libs.append(backend)
  if dokan_lib is not None:
    lib_static_link_libs.append(dokan_lib)
  if fuse_lib is not None:
    lib_dynamic_link_libs.append(fuse_lib)
  lib_static = drake.cxx.StaticLib(
    'lib/reactor',
    sources + lib_static_link_libs + openssl_libs,
    cxx_toolkit, lib_cxx_config)
  lib_dynamic_link_libs = [
    curl_lib,
    elle_lib,
    miniupnpc.library,
    utp_lib,
  ]
  if cxx_toolkit.os is drake.os.windows:
    lib_dynamic_link_libs.append(libcoroutine)
    lib_dynamic_link_libs.append(backend_coro_io)
  else:
    lib_dynamic_link_libs.append(backend_boost_context)
    lib_dynamic_link_libs.append(backend)
  if fuse_lib is not None:
    lib_dynamic_link_libs.append(fuse_lib)
  if cxx_toolkit.os in [drake.os.macos]:
    lib_cxx_config.framework_add('DiskArbitration')
    pass #lib_cxx_config.use_local_libcxx = True
  lib_dynamic = drake.cxx.DynLib(
    'lib/reactor',
    sources + lib_dynamic_link_libs + openssl_libs + cxx_libs,
    cxx_toolkit, lib_cxx_config)
  rule_build << lib_static
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    library = lib_static
  else:
    rule_build << lib_dynamic
    library = lib_dynamic

  if python3 is not None and cxx_toolkit.os != drake.os.windows:
    python_cxx_config = drake.cxx.Config(local_cxx_config)
    python_cxx_config.lib_path_runtime('..')
    python_cxx_config += python3
    if cxx_toolkit.os is drake.os.windows:
      python_cxx_config += boost.config_python(static = True)
    else:
      python_cxx_config += boost.config_python(link = False)
      python_cxx_config.library_add(
        drake.copy(boost.python_dynamic, 'lib', strip_prefix = True))
    python_sources = drake.nodes('src/reactor/python.cc')
    datetime = drake.copy(elle.python_plugin_datetime,
                          'lib', True)
    python_lib = drake.cxx.Module('lib/python/reactor',
                                  python_sources + [library, datetime],
                                  cxx_toolkit, python_cxx_config)
    drake.Rule('python') << python_lib
    rule_build << python_lib

  ## ----- ##
  ## Bins  ##
  ## ----- ##
  binaries_config = [
    'connectivity-server',
    'connectivity',
    'rdv-server',
  ]
  cxx_config_bin = drake.cxx.Config(local_cxx_config)
  for name in binaries_config:
    source = drake.node('bin/%s.cc' % name)
    bin = drake.cxx.Executable(
      'bin/%s' % name, [
        source,
        library,
        elle_lib,
      ],
      cxx_toolkit,
      cxx_config_bin)
    rule_build << bin
    if name == 'connectivity':
      connectivity = bin

  ## ----- ##
  ## Tests ##
  ## ----- ##

  global rule_check, rule_tests
  rule_check = drake.TestSuite('check')
  rule_tests = drake.Rule('tests')

  # (bin, libs, stdin)
  tests = [
    ('backend', [], None),
    ('fsm', [], None),
    ('generator', [], None),
    ('http', [curl_lib], None),
    ('logger', [], None),
    ('network', [], None),
    ('reactor', [], None),
    ('upnp', [], None), # Not an auto test, just a utility.
    ('ssl', openssl_libs, None),
    ('utp', [utp_lib], None),
    ('rdv-cat', [], None),
    ('rdv-utp-cat', [], None),
    # 'reactor/file',
    ]
  if cxx_toolkit.os in [drake.os.linux, drake.os.macos]:
    tests.append(('fdstream', [], 'something'))
    tests.append(('filesystem', [], None))
    tests.append(('filesystem_bind', [], None))
    tests.append(('filesystem_git', [], None))

  cxx_config_tests = drake.cxx.Config(local_cxx_config)

  cxx_config_tests.add_local_include_path('tests')
  cxx_config_tests += boost.config_filesystem(static = (cxx_toolkit.os in [drake.os.macos, drake.os.ios, drake.os.android]) or None)
  if cxx_toolkit.os in [drake.os.macos]:
    pass # cxx_config_tests.use_local_libcxx = True
  if cxx_toolkit.os == drake.os.android:
    cxx_config_tests.lib('stdc++')
    cxx_config_tests.lib('atomic')
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    cxx_config_tests += boost.config_test(static = True)
    cxx_config_tests += boost.config_timer(static = True)
  else:
    cxx_config_tests += boost.config_test(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))
    cxx_config_tests += boost.config_timer(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.timer_dynamic, 'lib', strip_prefix = True))

  for test_name, libraries, stdin in tests:
    tests_config = drake.cxx.Config(cxx_config_tests)
    tests_config.lib_path_runtime('%s../lib' % ('../' * test_name.count('/')))
    sources = drake.nodes('tests/%s.cc' % test_name) + [
      library, elle_lib
      ] + libraries
    if cxx_toolkit.os == drake.os.macos:
      sources += cxx_libs
    test = drake.cxx.Executable('tests/%s' % test_name,
                                sources,
                                cxx_toolkit, tests_config)
    rule_tests << test
    if test_name in ['filesystem_git', 'filesystem_bind', 'rdv-cat','rdv-utp-cat',]:
      continue
    env = {
      'DIR_BUILD':  str(drake.path_build()),
      'DIR_SOURCE': str(drake.path_source()),
    }
    if cxx_toolkit.os is drake.os.windows and sys.platform is 'linux':
      env['RUNNING_ON_WINE'] = '1'
    # Disable valgrind for tests using fuse.
    # Valgrind has deadlock issues when hosting a program that both implements
    # and use a FUSE fs from different threads.
    # The option --sim-hints=fuse-compatible is supposed to fix that, but
    # it crashes valgrind with an assert.
    if valgrind_tests and test_name is not 'filesystem':
      runner = drake.valgrind.ValgrindRunner(
        exe = test,
        valgrind = valgrind,
        env = env,
        stdin = stdin,
        valgrind_args = ['--suppressions=%s' % (drake.path_source('../valgrind.suppr'))
        ])
    else:
      runner = drake.Runner(exe = test, env = env,stdin = stdin)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  if python3 is not None and cxx_toolkit.os is not drake.os.windows:
    python_tests = (
      'tests/python',
      )
    with drake.templating.Context(content = {
        'python_interpreter': str(python3.python_interpreter),
    }):
      for test in python_tests:
        drake.node('%s.tmpl' % python_tests)
    for test in python_tests:
      test = drake.node(test)
      test.dependency_add(python_lib)
      python_runner = drake.Runner(
        exe = test,
        env = {
          'PYTHONPATH': str(drake.path_build('lib/python')),
        },
        )
      rule_check << python_runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  if prefix is not False:
    rule_install = drake.Rule('install')
    if cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix)
    rule_install << drake.install(lib_static, prefix)
    rule_install << drake.install(
      list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)),
      prefix / 'include', 'src')
