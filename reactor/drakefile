import drake
import drake.cxx
import drake.cxx.boost
import drake.templating
import sys

config = None
lib_static = None
lib_dynamic = None
library = None
python_lib = None

library_coroutine = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

asio_udt_lib = None

def configure(curl_config,
              curl_lib,
              zlib_config,
              zlib_lib,
              cxx_toolkit,
              cxx_config,
              boost,
              openssl_config,
              openssl_lib_crypto,
              openssl_lib_ssl,
              python3 = None,
              elle = None,
              prefix = '/usr',
              valgrind = None):

  global asio_udt_lib
  global config, lib_static, lib_dynamic, library, library_coroutine
  global rule_build, rule_install
  global python_lib

  # Public C++ configuration
  config = drake.cxx.Config()
  config.add_local_include_path('src')
  config.standard = drake.cxx.Config.cxx_11
  config.lib_path('lib')

  # Local C++ configuration
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config += config
  local_cxx_config.lib_path_runtime('.')
  local_cxx_config.enable_debug_symbols()


  libcoroutine_sources = drake.nodes(
    'src/reactor/backend/coro_io/libcoroutine/asm.S',
    'src/reactor/backend/coro_io/libcoroutine/context.cc',
    'src/reactor/backend/coro_io/libcoroutine/coroutine.cc',
    'src/reactor/backend/coro_io/libcoroutine/coroutine.hh',
  )
  libcoroutine_cxx_config = drake.cxx.Config(local_cxx_config)
  libcoroutine_cxx_config.warnings.missing_declarations = None
  if valgrind is not None:
    libcoroutine_cxx_config.define('USE_VALGRIND')
  libcoroutine = drake.cxx.StaticLib('lib/coroutine',
                                     libcoroutine_sources,
                                     cxx_toolkit,
                                     libcoroutine_cxx_config)
  library_coroutine = libcoroutine

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  local_cxx_config += boost.config()
  if cxx_toolkit.os is drake.os.windows:
    local_cxx_config += boost.config_signals(static = True)
    local_cxx_config += boost.config_system(static = True)
    local_cxx_config += boost.config_thread(static = True)
  else:
    local_cxx_config += boost.config_signals(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.signals_dynamic, 'lib', strip_prefix = True))
    local_cxx_config += boost.config_system(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.system_dynamic, 'lib', strip_prefix = True))
    local_cxx_config += boost.config_thread(link = False)
    local_cxx_config.library_add(
      drake.copy(boost.thread_dynamic, 'lib', strip_prefix = True))

  # Curl
  local_cxx_config += curl_config
  curl_lib = drake.copy(curl_lib, 'lib', strip_prefix = True)

  # OpenSSL (for SSL sockets)
  local_cxx_config += openssl_config
  openssl_libs = drake.copy([openssl_lib_ssl, openssl_lib_crypto],
                            'lib', strip_prefix = True)


  # Zlib
  local_cxx_config += zlib_config
  zlib_lib = drake.copy(zlib_lib, 'lib', strip_prefix = True)

  # Elle
  elle = elle or drake.include('../elle')
  local_cxx_config += elle.config
  elle_lib = drake.copy(elle.library, 'lib', elle.library.name().dirname())

  # miniupnpc
  miniupnp = drake.include('miniupnp', cxx_toolkit)
  miniupnpc = miniupnp.miniupnpc
  local_cxx_config += miniupnpc.config

  # Build
  rule_build = drake.Rule('build')

  # UDT
  #asio_udt = drake.include('asio-udt', cxx_toolkit, cxx_config, boost = boost)
  #asio_udt_lib = drake.copy(asio_udt.library, '', 'asio-udt')
  #udt_lib = drake.copy(asio_udt.udt.library, '', 'asio-udt/udt')

  # Asio-FS
  # asio_fs = drake.include('asio-fs', cxx_toolkit, cxx_config, boost = boost)
  # asio_fs_lib = drake.copy(asio_fs.library_dynamic, '', 'asio-fs')
  # config += asio_fs.config

  sources = drake.nodes(
    'src/reactor/Barrier.cc',
    'src/reactor/Barrier.hh',
    'src/reactor/Channel.hh',
    'src/reactor/Scope.cc',
    'src/reactor/Scope.hh',
    'src/reactor/asio.hh',
    'src/reactor/backend/backend.cc',
    'src/reactor/backend/backend.hh',
    'src/reactor/backend/coro_io/backend.cc',
    'src/reactor/backend/coro_io/backend.hh',
    # 'src/reactor/backend/pthread/pthread.cc',
    # 'src/reactor/backend/pthread/pthread.hh',
    'src/reactor/duration.cc',
    'src/reactor/duration.hh',
    'src/reactor/exception.cc',
    'src/reactor/exception.hh',
    # 'src/reactor/fs/File.hh',
    # 'src/reactor/fs/File.cc',
    'src/reactor/fsm/fwd.hh',
    'src/reactor/fsm/CatchTransition.cc',
    'src/reactor/fsm/CatchTransition.hh',
    'src/reactor/fsm/EndTransition.cc',
    'src/reactor/fsm/EndTransition.hh',
    'src/reactor/fsm/Machine.cc',
    'src/reactor/fsm/Machine.hh',
    'src/reactor/fsm/Machine.hxx',
    'src/reactor/fsm/State.cc',
    'src/reactor/fsm/State.hh',
    'src/reactor/fsm/Transition.cc',
    'src/reactor/fsm/Transition.hh',
    'src/reactor/fsm/WaitableTransition.cc',
    'src/reactor/fsm/WaitableTransition.hh',
    'src/reactor/fwd.hh',
    'src/reactor/lockable.cc',
    'src/reactor/lockable.hh',
    'src/reactor/logger.cc',
    'src/reactor/logger.hh',
    'src/reactor/mutex.cc',
    'src/reactor/mutex.hh',
    'src/reactor/network/SocketOperation.cc',
    'src/reactor/network/SocketOperation.hh',
    'src/reactor/network/buffer.hh',
    'src/reactor/network/exception.cc',
    'src/reactor/network/exception.hh',
    'src/reactor/network/fwd.hh',
    # 'src/reactor/network/nat.cc',
    # 'src/reactor/network/nat.hh',
    'src/reactor/network/Protocol.cc',
    'src/reactor/network/Protocol.hh',
    'src/reactor/network/resolve.cc',
    'src/reactor/network/resolve.hh',
    'src/reactor/network/server.cc',
    'src/reactor/network/server.hh',
    'src/reactor/network/socket.cc',
    'src/reactor/network/socket.hh',
    'src/reactor/network/tcp-server.cc',
    'src/reactor/network/tcp-server.hh',
    'src/reactor/network/tcp-socket.cc',
    'src/reactor/network/tcp-socket.hh',
    'src/reactor/network/fingerprinted-socket.cc',
    'src/reactor/network/fingerprinted-socket.hh',
    'src/reactor/network/ssl-socket.hh',
    'src/reactor/network/ssl-socket.cc',
    'src/reactor/network/ssl-socket.hh',
    'src/reactor/network/ssl-server.cc',
    'src/reactor/network/ssl-server.hh',
    'src/reactor/network/upnp.cc',
    'src/reactor/network/upnp.hh',
    # 'src/reactor/network/udt-rdv-server.cc',
    # 'src/reactor/network/udt-rdv-server.hh',
    # 'src/reactor/network/udt-server.cc',
    # 'src/reactor/network/udt-server.hh',
    # 'src/reactor/network/udt-socket.cc',
    # 'src/reactor/network/udt-socket.hh',
    'src/reactor/operation.cc',
    'src/reactor/operation.hh',
    'src/reactor/rw-mutex.cc',
    'src/reactor/rw-mutex.hh',
    'src/reactor/scheduler.cc',
    'src/reactor/scheduler.hh',
    'src/reactor/semaphore.cc',
    'src/reactor/semaphore.hh',
    'src/reactor/signal.cc',
    'src/reactor/signal.hh',
    'src/reactor/signals.hh',
    'src/reactor/sleep.cc',
    'src/reactor/sleep.hh',
    'src/reactor/storage.cc',
    'src/reactor/storage.hh',
    'src/reactor/timer.cc',
    'src/reactor/timer.hh',
    'src/reactor/thread.cc',
    'src/reactor/thread.hh',
    'src/reactor/waitable.cc',
    'src/reactor/waitable.hh',
    )

  sources += drake.nodes(
    'src/reactor/http/Client.cc',
    'src/reactor/http/Client.hh',
    'src/reactor/http/EscapedString.cc',
    'src/reactor/http/EscapedString.hh',
    'src/reactor/http/Method.cc',
    'src/reactor/http/Method.hh',
    'src/reactor/http/Request.cc',
    'src/reactor/http/Request.hh',
    'src/reactor/http/Service.cc',
    'src/reactor/http/Service.hh',
    'src/reactor/http/StatusCode.cc',
    'src/reactor/http/StatusCode.hh',
    'src/reactor/http/Version.cc',
    'src/reactor/http/Version.hh',
    'src/reactor/http/exceptions.cc',
    'src/reactor/http/exceptions.hh',
  )

  lib_cxx_config = drake.cxx.Config(local_cxx_config)
  lib_static = drake.cxx.StaticLib(
    'lib/reactor',
    sources + [
      curl_lib,
      elle.lib_static,
      miniupnpc.library,
      libcoroutine
      ] + openssl_libs,
    cxx_toolkit, lib_cxx_config)
  lib_dynamic = drake.cxx.DynLib(
    'lib/reactor',
    sources + [
      curl_lib,
      elle_lib,
      miniupnpc.library,
      libcoroutine,
      ] + openssl_libs,
    cxx_toolkit, lib_cxx_config)
  rule_build << lib_static
  if cxx_toolkit.os != drake.os.windows:
    rule_build << lib_dynamic
    library = lib_dynamic
  else:
    library = lib_static

  if python3 is not None:
    python_cxx_config = drake.cxx.Config(local_cxx_config)
    python_cxx_config.lib_path_runtime('..')
    python_cxx_config += python3
    if cxx_toolkit.os is drake.os.windows:
      python_cxx_config += boost.config_python(static = True)
    else:
      python_cxx_config += boost.config_python(link = False)
      python_cxx_config.library_add(
        drake.copy(boost.python_dynamic, 'lib', strip_prefix = True))
    python_sources = drake.nodes('src/reactor/python.cc')
    python_lib = drake.cxx.Module('lib/python/reactor',
                                  python_sources + [library, elle.python_gil],
                                  cxx_toolkit, python_cxx_config)
    drake.Rule('python') << python_lib
    rule_build << python_lib

  ## ----- ##
  ## Tests ##
  ## ----- ##

  global rule_check, rule_tests
  rule_check = drake.TestSuite('check')
  rule_tests = drake.Rule('tests')

  tests = [
    ('backend', []),
    ('fsm', []),
    ('http', [curl_lib]),
    ('logger', []),
    ('network', []),
    ('reactor', []),
    ('upnp', []), # Not an auto test, just an utility.
    ('ssl', openssl_libs),
    # 'reactor/file',
    ]

  cxx_config_tests = drake.cxx.Config(local_cxx_config)
  cxx_config_tests.add_local_include_path('tests')
  cxx_config_tests += boost.config_filesystem(static = (cxx_toolkit.os is drake.os.macos) or None)
  if cxx_toolkit.os is drake.os.windows:
    cxx_config_tests += boost.config_test(static = True)
  else:
    cxx_config_tests += boost.config_test(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))

  for test, libraries in tests:
    tests_config = drake.cxx.Config(cxx_config_tests)
    tests_config.lib_path_runtime('%s../lib' % ('../' * test.count('/')))
    if valgrind is not None:
      tests_config.define('VALGRIND')
    sources = drake.nodes('tests/%s.cc' % test) + [
      library, library_coroutine, elle_lib
      ] + libraries
    test = drake.cxx.Executable('tests/%s' % test,
                                sources,
                                cxx_toolkit, tests_config)
    rule_tests << test
    env = {
      'DIR_BUILD':  str(drake.path_build()),
      'DIR_SOURCE': str(drake.path_source()),
    }
    if cxx_toolkit.os is drake.os.windows and sys.platform is 'linux':
      env['RUNNING_ON_WINE'] = '1'
    if valgrind is not None:
      runner = drake.valgrind.ValgrindRunner(exe = test,
                                             valgrind = valgrind,
                                             env = env)
    else:
      runner = drake.Runner(exe = test, env = env)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  if python3 is not None and cxx_toolkit.os is not drake.os.windows:
    python_tests = (
      'tests/python',
      )
    with drake.templating.Context(content = {
        'python_interpreter': str(python3.python_interpreter),
    }):
      for test in python_tests:
        drake.node('%s.tmpl' % python_tests)
    for test in python_tests:
      test = drake.node(test)
      test.dependency_add(python_lib)
      python_runner = drake.Runner(
        exe = test,
        env = {
          'PYTHONPATH': str(drake.path_build('lib/python')),
        },
        )
      rule_check << python_runner.status

  # Install
  rule_install = drake.Rule('install')
  if cxx_toolkit.os != drake.os.windows:
    rule_install << drake.install(lib_dynamic, prefix)
  rule_install << drake.install(lib_static, prefix)
  rule_install << drake.install(
    list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)),
    prefix / 'include', 'src')
