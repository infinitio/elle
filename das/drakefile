import drake

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

config = None

def configure(cxx_toolkit,
              cxx_config,
              elle,
              boost,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = True):

  global rule_build, rule_check, rule_tests
  global config

  ## ----------------- ##
  ## C++ configuration ##
  ## ----------------- ##

  rule_build = drake.Rule('build')
  config = drake.cxx.Config(elle.config)
  config.add_local_include_path('src')
  local_config = drake.cxx.Config(config) + cxx_config

  ## ------ ##
  ## Libdas ##
  ## ------ ##

  sources = drake.nodes(
    'src/das/Collection.hh',
    'src/das/Object.cc',
    'src/das/Object.hh',
    'src/das/Variable.hh',
    'src/das/Variable.hxx',
    'src/das/model.hh',
  )
  das_dynamic = \
    drake.cxx.DynLib('lib/das', sources, cxx_toolkit, local_config)
  das_static = \
    drake.cxx.StaticLib('lib/das', sources, cxx_toolkit, local_config)
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    das = das_static
  else:
    das = das_dynamic

  ## ----- ##
  ## Tests ##
  ## ----- ##

  local_config_tests = drake.cxx.Config(local_config)
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    local_config_tests += boost.config_test(static = True)
    local_config_tests += boost.config_timer(static = True)
  else:
    local_config_tests += boost.config_test(link = False)
    local_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))
    local_config_tests += boost.config_timer(link = False)
    local_config_tests.library_add(
      drake.copy(boost.timer_dynamic, 'lib', strip_prefix = True))
  local_config_tests.lib_path_runtime('../lib')
  if cxx_toolkit.os is drake.os.android:
    local_config_tests.lib('stdc++')
    local_config_tests.lib('atomic')
  rule_tests = drake.Rule('tests')
  rule_check = drake.TestSuite('check')
  elle_library = drake.copy(elle.library, 'lib', strip_prefix = True)
  for name in [
      # 'das',
      # 'object',
      'flatten',
      'printer',
      'serialize',
      'symbol',
  ]:
    test = drake.cxx.Executable(
      'tests/%s' % name,
      [drake.node('tests/%s.cc' % name), das, elle_library],
      cxx_toolkit,
      local_config_tests)
    rule_tests << test
    runner = drake.Runner(test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status
