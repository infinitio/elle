import drake

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

lib_dynamic = None
lib_static  = None

config = None

def configure(cxx_toolkit,
              cxx_config,
              elle,
              das,
              reactor,
              cryptography,
              boost,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = True):

  global lib_dynamic, lib_static
  global rule_build, rule_check, rule_install, rule_tests
  global config

  ## ----------------- ##
  ## C++ configuration ##
  ## ----------------- ##

  config = \
    elle.config + das.config + reactor.config + cryptography.config
  config.add_local_include_path('src')
  local_config = drake.cxx.Config(config) + cxx_config

  ## ------- ##
  ## Library ##
  ## ------- ##

  if cxx_toolkit.os in [drake.os.ios, drake.os.android]:
    elle_lib = elle.lib_static
    reactor_lib = reactor.lib_static
    cryptography_lib = cryptography.lib_static
  else:
    elle_lib = drake.copy(
      elle.lib_dynamic, 'lib', strip_prefix = True)
    reactor_lib = drake.copy(
      reactor.lib_dynamic, 'lib', strip_prefix = True)
    cryptography_lib = drake.copy(
      cryptography.lib_dynamic, 'lib', strip_prefix = True)

  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    local_config += boost.config_system(static = True)
  else:
    local_config += boost.config_system(link = False)
    local_config.library_add(
      drake.copy(boost.system_dynamic, 'lib', strip_prefix = True))
  sources = drake.nodes(
    'src/athena/paxos/Client.cc',
    'src/athena/paxos/Client.hh',
    'src/athena/paxos/Client.hxx',
    'src/athena/paxos/Server.hh',
    'src/athena/paxos/Server.hxx',
  )
  lib_dynamic = drake.cxx.DynLib(
    'lib/athena',
    sources + [elle_lib, reactor_lib, cryptography_lib],
    cxx_toolkit, local_config)
  lib_static = drake.cxx.StaticLib(
    'lib/athena',
    sources + [elle_lib, reactor_lib, cryptography_lib],
    cxx_toolkit, local_config)
  rule_build = drake.Rule('build')
  if cxx_toolkit.os in [drake.os.ios, drake.os.android]:
    library = lib_static
  else:
    library = lib_dynamic
  rule_build << library

  ## ----- ##
  ## Tests ##
  ## ----- ##

  local_config_tests = drake.cxx.Config(local_config)
  local_config_tests.enable_debug_symbols()
  if cxx_toolkit.os in [
      drake.os.windows, drake.os.ios, drake.os.android]:
    local_config_tests += boost.config_test(static = True)
  else:
    local_config_tests += boost.config_test(link = False)
    local_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))
  local_config_tests.lib_path_runtime('../lib')
  rule_tests = drake.Rule('tests')
  rule_check = drake.TestSuite('check')
  for name in ('paxos',):
    test = drake.cxx.Executable(
      'tests/%s' % name,
      [drake.node('tests/%s.cc' % name),
       library, elle_lib, reactor_lib, cryptography_lib],
      cxx_toolkit,
      local_config_tests)
    rule_tests << test
    runner = drake.Runner(test)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status
