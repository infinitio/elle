import drake
import drake.cxx
import drake.cxx.boost
import drake.valgrind
import sys
import os


config = None
lib_static = None
lib_dynamic = None
library = None
python = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

python_plugin_datetime = None

# XXX
with open(str(drake.path_source('../drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(zlib_lib,
              zlib_config,
              libarchive_lib,
              libarchive_config,
              cxx_toolkit = None,
              cxx_config = None,
              boost = None,
              python3 = None,
              prefix = '/usr',
              valgrind = None,
              valgrind_tests = False,
            ):

  global config, lib_static, lib_dynamic, library, library_zlib
  global python
  global rule_build, rule_check, rule_install, rule_tests
  global python_plugin_datetime

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = drake.cxx.Config(cxx_config) or drake.cxx.Config()

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  cxx_config += boost.config()
  if cxx_toolkit.os in [drake.os.macos, drake.os.windows, drake.os.ios, drake.os.android]:
    cxx_config += boost.config_filesystem(static = True)
  else:
    cxx_config += boost.config_filesystem(link = False)
    cxx_config.library_add(drake.copy(boost.filesystem_dynamic,
                                      'lib', strip_prefix = True))
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    cxx_config += boost.config_system(static = True)
    cxx_config += boost.config_thread(static = True)
    if cxx_toolkit.os is drake.os.windows:
      cxx_config += boost.config_locale(static = True)
    cxx_config += boost.config_chrono(static = True)
    if python3 is not None:
      boost_python = drake.cxx.Config(boost.config_python(static = True))
  else:
    if python3 is not None:
      boost_python = drake.cxx.Config(
        boost.config_system(link = False))
      boost_python.library_add(
        drake.copy(boost.python_dynamic, 'lib', strip_prefix = True))
    cxx_config += boost.config_system(link = False)
    cxx_config.library_add(drake.copy(boost.system_dynamic,
                                      'lib', strip_prefix = True))
    cxx_config += boost.config_thread(link = False)
    cxx_config.library_add(drake.copy(boost.thread_dynamic,
                                      'lib', strip_prefix = True))
    cxx_config += boost.config_chrono(link = False)
    cxx_config.library_add(drake.copy(boost.chrono_dynamic,
                                      'lib', strip_prefix = True))

  # JSON spirit
  cxx_config.add_local_include_path('src/elle/json/json-spirit/include')
  cxx_config.define('JSON_SPIRIT_WVALUE_DISABLED')

  config = drake.cxx.Config()
  config.standard = drake.cxx.Config.cxx_14
  config.add_local_include_path('src')
  config.lib_path('lib')
  config.define('BOOST_PP_VARIADICS')
  config.define('BOOST_FILESYSTEM_NO_DEPRECATED', '1')
  config += boost.config()
  if valgrind is not None:
    config.define('VALGRIND')

  # XXX[for fuse only]
  config.define('HAVE_SETXATTR')

  # XXX[for fuse only]
  if cxx_toolkit.os == drake.os.macos:
    config.define('HAVE_STATFS')

  cxx_config = cxx_config + config
  cxx_config.lib_path_runtime('.')

  # Libraries
  zlib_lib = drake.copy(zlib_lib, 'lib', strip_prefix = True)
  cxx_config += zlib_config
  libarchive_lib = drake.copy(libarchive_lib, 'lib',
                              strip_prefix = True)
  if cxx_toolkit.os in [drake.os.macos, drake.os.ios]:
    cxx_config.framework_add('Foundation')

  sources = drake.nodes(
    'src/elle/finally.cc',
    'src/elle/finally.hh',
    'src/elle/factory.hh',
    'src/elle/factory.hxx',
    'src/elle/filesystem.cc',
    'src/elle/filesystem.hh',
    'src/elle/filesystem.hxx',
    'src/elle/filesystem/TemporaryDirectory.cc',
    'src/elle/filesystem/TemporaryDirectory.hh',
    'src/elle/filesystem/TemporaryFile.cc',
    'src/elle/filesystem/TemporaryFile.hh',
    'src/elle/AtomicFile.cc',
    'src/elle/AtomicFile.hh',
    'src/elle/Backtrace.cc',
    'src/elle/Backtrace.hh',
    'src/elle/BadAlloc.cc',
    'src/elle/BadAlloc.hh',
    'src/elle/Buffer.cc',
    'src/elle/Buffer.hh',
    'src/elle/Duration.cc',
    'src/elle/Duration.hh',
    'src/elle/Error.cc',
    'src/elle/Error.hh',
    'src/elle/Exception.cc',
    'src/elle/Exception.hh',
    'src/elle/Exit.cc',
    'src/elle/Exit.hh',
    'src/elle/HttpClient.cc',
    'src/elle/HttpClient.hh',
    'src/elle/IOStream.cc',
    'src/elle/IOStream.hh',
    'src/elle/Lazy.hh',
    'src/elle/Lazy.hxx',
    'src/elle/Option.hh',
    'src/elle/Option.hxx',
    'src/elle/Plugin.cc',
    'src/elle/Plugin.hh',
    'src/elle/Plugin.hxx',
    'src/elle/Printable.cc',
    'src/elle/Printable.hh',
    'src/elle/Range.cc',
    'src/elle/Range.hh',
    'src/elle/TypeInfo.cc',
    'src/elle/TypeInfo.hh',
    'src/elle/TypeInfo.hxx',
    'src/elle/UUID.cc',
    'src/elle/UUID.hh',
    'src/elle/Version.cc',
    'src/elle/assert.cc',
    'src/elle/assert.hh',
    'src/elle/bench.cc',
    'src/elle/bench.hh',
    'src/elle/compiler.hh',
    'src/elle/concept/Fileable.hh',
    'src/elle/concept/Fileable.hxx',
    'src/elle/concept/Uniquable.hh',
    'src/elle/concept/Uniquable.hxx',
    'src/elle/concept/fwd.hh',
    'src/elle/string/algorithm.hh',
    'src/elle/string/algorithm.hxx',
    'src/elle/format/fwd.hh',
    'src/elle/format/hexadecimal.cc',
    'src/elle/format/hexadecimal.hh',
    'src/elle/format/base64.cc',
    'src/elle/format/base64.hh',
    'src/elle/format/base64url.cc',
    'src/elle/format/base64url.hh',
    'src/elle/format/base64url.hxx',
    'src/elle/format/gzip.cc',
    'src/elle/format/gzip.hh',
    'src/elle/format/ini/File.cc',
    'src/elle/format/ini/File.hh',
    'src/elle/format/ini/Section.cc',
    'src/elle/format/ini/Section.hh',
    'src/elle/format/ini/Section.hxx',
    'src/elle/format/ini/fwd.hh',
    'src/elle/format/json.hh',
    'src/elle/format/json/Array.cc',
    'src/elle/format/json/Array.hh',
    'src/elle/format/json/Array.hxx',
    'src/elle/format/json/Bool.cc',
    'src/elle/format/json/Bool.hh',
    'src/elle/format/json/Dictionary.cc',
    'src/elle/format/json/Dictionary.hh',
    'src/elle/format/json/Dictionary.hxx',
    'src/elle/format/json/Factory.cc',
    'src/elle/format/json/Factory.hh',
    'src/elle/format/json/Factory.hxx',
    'src/elle/format/json/Float.cc',
    'src/elle/format/json/Float.hh',
    'src/elle/format/json/Integer.cc',
    'src/elle/format/json/Integer.hh',
    'src/elle/format/json/Null.cc',
    'src/elle/format/json/Null.hh',
    'src/elle/format/json/Object.cc',
    'src/elle/format/json/Object.hh',
    'src/elle/format/json/Object.hxx',
    'src/elle/format/json/Parser.cc',
    'src/elle/format/json/Parser.hh',
    'src/elle/format/json/String.cc',
    'src/elle/format/json/String.hh',
    'src/elle/format/json/_detail.hh',
    'src/elle/format/json/fwd.hh',
    'src/elle/fwd.hh',
    'src/elle/io/Console.cc',
    'src/elle/io/Console.hh',
    'src/elle/io/Dumpable.cc',
    'src/elle/io/Dumpable.hh',
    'src/elle/io/Path.cc',
    'src/elle/io/Path.hh',
    'src/elle/io/Path.hxx',
    'src/elle/io/Pattern.cc',
    'src/elle/io/Pattern.hh',
    'src/elle/io/Piece.cc',
    'src/elle/io/Piece.hh',
    'src/elle/io/Unique.hh',
    'src/elle/io/fwd.hh',
    'src/elle/log.hh',
    'src/elle/log/Logger.cc',
    'src/elle/log/Logger.hh',
    'src/elle/log/Send.cc',
    'src/elle/log/Send.hh',
    'src/elle/log/Send.hxx',
    'src/elle/log/SysLogger.cc',
    'src/elle/log/SysLogger.hh',
    'src/elle/log/TextLogger.cc',
    'src/elle/log/TextLogger.hh',
    'src/elle/meta.hh',
    'src/elle/named.hh',
    'src/elle/network/Interface.cc',
    'src/elle/network/Interface.hh',
    'src/elle/network/Interface.hxx',
    'src/elle/network/fwd.hh',
    'src/elle/network/hostname.cc',
    'src/elle/network/hostname.hh',
    'src/elle/os.hh',
    'src/elle/os/environ.hh',
    'src/elle/os/environ.cc',
    'src/elle/os/exceptions.cc',
    'src/elle/os/exceptions.hh',
    'src/elle/os/file.hh',
    'src/elle/os/file.cc',
    'src/elle/os/locale.hh',
    'src/elle/os/locale.cc',
    'src/elle/os/path.cc',
    'src/elle/os/path.hh',
    'src/elle/os/path.hxx',
    'src/elle/print.cc',
    'src/elle/print.hh',
    'src/elle/print.hxx',
    'src/elle/printf.hh',
    'src/elle/printf.hxx',
    'src/elle/ProducerPool.hh',
    'src/elle/ProducerPool.hxx',
    'src/elle/serialization.cc',
    'src/elle/serialization.hh',
    'src/elle/sfinae.hh',
    'src/elle/system/getpid.cc',
    'src/elle/system/getpid.hh',
    'src/elle/system/home_directory.hh',
    'src/elle/system/platform.hh',
    'src/elle/system/signal.cc',
    'src/elle/system/signal.hh',
    'src/elle/system/user_paths.hh',
    'src/elle/time.hh',
    'src/elle/types.hh',
    'src/elle/utils.hh',
    )
  version = drake.node('src/elle/elle.hh')
  CxxVersionGenerator(output = version, git = drake.git.Git(),
                      prefix = 'ELLE')
  sources.append(version)

  # Platform specific.
  if cxx_toolkit is not drake.os.ios:
    sources += drake.nodes(
      'src/elle/system/username.cc',
      'src/elle/system/username.hh',
    )
  if cxx_toolkit.os not in [drake.os.macos, drake.os.ios] or cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.gcc:
    sources += drake.nodes(
      'src/elle/system/platform.cc',
      'src/elle/system/user_paths.cc',
    )
  elif cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
    sources += drake.nodes(
      'src/elle/system/platform.mm',
      'src/elle/system/user_paths.mm',
    )

  if cxx_toolkit.os is drake.os.android:
    sources += drake.nodes(
      'src/elle/network/ifaddrs_android.c',
    )
  # JSON Spirit
  sources += drake.nodes(
    'src/elle/json/json-spirit/include/json_spirit/json_spirit.h',
    'src/elle/json/json-spirit/include/json_spirit/parse_error.h',
    'src/elle/json/json-spirit/include/json_spirit/path_error.h',
    'src/elle/json/json-spirit/include/json_spirit/platform.h',
    'src/elle/json/json-spirit/include/json_spirit/reader.h',
    'src/elle/json/json-spirit/include/json_spirit/reader_template.h',
    'src/elle/json/json-spirit/include/json_spirit/stream_reader.h',
    'src/elle/json/json-spirit/include/json_spirit/value.h',
    'src/elle/json/json-spirit/include/json_spirit/writer.h',
    'src/elle/json/json-spirit/include/json_spirit/writer_options.h',
    'src/elle/json/json-spirit/include/json_spirit/writer_template.h',
    'src/elle/json/json-spirit/src/reader.cpp',
    'src/elle/json/json-spirit/src/value.cpp',
    'src/elle/json/json-spirit/src/writer.cpp',
  )

  # JSON Wrapper
  sources += drake.nodes(
    'src/elle/json/exceptions.cc',
    'src/elle/json/exceptions.hh',
    'src/elle/json/json.cc',
    'src/elle/json/json.hh',
  )

  sources += drake.nodes(
    'src/elle/serialize/ArchiveMode.cc',
    'src/elle/serialize/ArchiveMode.hh',
    'src/elle/serialize/ArraySerializer.hxx',
    'src/elle/serialize/Base64Archive.cc',
    'src/elle/serialize/Base64Archive.hh',
    'src/elle/serialize/BaseArchive.hh',
    'src/elle/serialize/BaseArchive.hxx',
    'src/elle/serialize/BinaryArchive.hh',
    'src/elle/serialize/BinaryArchive.hxx',
    'src/elle/serialize/Format.hh',
    'src/elle/serialize/HexadecimalArchive.hh',
    'src/elle/serialize/IniArchive.cc',
    'src/elle/serialize/IniArchive.hh',
    'src/elle/serialize/JSONArchive.cc',
    'src/elle/serialize/JSONArchive.hh',
    'src/elle/serialize/JSONArchive.hxx',
    'src/elle/serialize/ListSerializer.hxx',
    'src/elle/serialize/MapSerializer.hxx',
    'src/elle/serialize/PairSerializer.hxx',
    'src/elle/serialize/Pointer.hh',
    'src/elle/serialize/Pointer.hxx',
    'src/elle/serialize/Serializable.hh',
    'src/elle/serialize/Serializable.hxx',
    'src/elle/serialize/Serializer.hh',
    'src/elle/serialize/SetSerializer.hxx',
    'src/elle/serialize/StaticFormat.hh',
    'src/elle/serialize/TupleSerializer.hxx',
    'src/elle/serialize/VectorSerializer.hxx',
    'src/elle/serialize/detail/AssociativeSerializer.hh',
    'src/elle/serialize/detail/MergeArchive.hh',
    'src/elle/serialize/detail/SequenceSerializer.hh',
    'src/elle/serialize/detail/stream.hh',
    'src/elle/serialize/detail/stream.cc',
    'src/elle/serialize/extract.cc',
    'src/elle/serialize/extract.hh',
    'src/elle/serialize/extract.hxx',
    'src/elle/serialize/footprint.hh',
    'src/elle/serialize/footprint.hxx',
    'src/elle/serialize/fwd.hh',
    'src/elle/serialize/insert.cc',
    'src/elle/serialize/insert.hh',
    'src/elle/serialize/insert.hxx',
    )

  sources += drake.nodes(
    'src/elle/system/platform.hh',
    'src/elle/system/Process.cc',
    'src/elle/system/Process.hh',
    'src/elle/system/system.cc',
    'src/elle/system/system.hh',
  )

  if cxx_toolkit.os is drake.os.windows:
    # Windows specific implementation.
    sources += drake.nodes(
      'src/elle/system/Windows/version.hh',
      'src/elle/system/Windows/version.cc',
    )

  sources += drake.nodes(
    'src/elle/utility/Duration.cc',
    'src/elle/utility/Duration.hh',
    'src/elle/utility/Duration.hxx',
    'src/elle/utility/Parser.cc',
    'src/elle/utility/Parser.hh',
    'src/elle/utility/Parser.hxx',
    'src/elle/utility/Product.hh',
    'src/elle/utility/Settings.cc',
    'src/elle/utility/Settings.hh',
    'src/elle/utility/Time.cc',
    'src/elle/utility/Time.hh',
    'src/elle/utility/Time.hxx',
    'src/elle/utility/URI.hh',
    'src/elle/utility/Unicode.hh',
    'src/elle/utility/Utility.hh',
    'src/elle/utility/fwd.hh',
   )

  sources += drake.nodes(
    'src/elle/serialization/Error.cc',
    'src/elle/serialization/Error.hh',
    'src/elle/serialization/Serializer.cc',
    'src/elle/serialization/Serializer.hh',
    'src/elle/serialization/Serializer.hxx',
    'src/elle/serialization/SerializerIn.cc',
    'src/elle/serialization/SerializerIn.hh',
    'src/elle/serialization/SerializerOut.cc',
    'src/elle/serialization/SerializerOut.hh',
    'src/elle/serialization/SerializerOut.hxx',
    'src/elle/serialization/fwd.hh',
    'src/elle/serialization/json.hh',
    'src/elle/serialization/json/FieldError.cc',
    'src/elle/serialization/json/FieldError.hh',
    'src/elle/serialization/json/MissingKey.cc',
    'src/elle/serialization/json/MissingKey.hh',
    'src/elle/serialization/json/Overflow.cc',
    'src/elle/serialization/json/Overflow.hh',
    'src/elle/serialization/json/SerializerIn.cc',
    'src/elle/serialization/json/SerializerIn.hh',
    'src/elle/serialization/json/SerializerOut.cc',
    'src/elle/serialization/json/SerializerOut.hh',
    'src/elle/serialization/json/TypeError.cc',
    'src/elle/serialization/json/TypeError.hh',
    'src/elle/serialization/binary/SerializerIn.hh',
    'src/elle/serialization/binary/SerializerIn.cc',
    'src/elle/serialization/binary/SerializerOut.hh',
    'src/elle/serialization/binary/SerializerOut.cc',
    'src/elle/serialization/binary.hh',
  )

  sources += drake.nodes(
    'src/map',
    'src/set',
    'src/unordered_map',
    'src/unordered_set',
    'src/vector',
    type = drake.cxx.Header,
  )

  # Python binding helpers.
  if python3 is not None:
    sources += drake.nodes(
      'src/elle/python/containers.hh',
      'src/elle/python/containers.hxx',
      'src/elle/python/converter-plugin.hh',
      'src/elle/python/gil.hh'
    )

  if cxx_toolkit.os is drake.os.windows:
    sources += drake.nodes(
      'src/elle/windows/string_conversion.hh',
      'src/elle/windows/string_conversion.cc',
    )

  if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
    cxx_config.define('JSON_SPIRIT_STATIC_LINKED')
    #sources.append(drake.node('src/elle/utility/Unicode-win32.cc'))
  else:
    sources.append(drake.node('src/elle/utility/Unicode-unix.cc'))

  # Archive
  cxx_archive_config = cxx_config + libarchive_config
  for f in (
      'archive',
      'tar',
      'zip',
  ):
    sources.append(drake.node('src/elle/archive/%s.hh' % f))
    sources.append(
      drake.cxx.Object(drake.node('src/elle/archive/%s.cc' % f),
                       cxx_toolkit, cxx_archive_config))

  lib_cxx_config = drake.cxx.Config(cxx_config)
  if cxx_toolkit.os == drake.os.windows:
    lib_cxx_config.use_whole_archive()
    lib_cxx_config.define('ELLE_SERIALIZATION_BUILD_DLL')
  lib_static = drake.cxx.StaticLib(
    'lib/elle',
    sources + [zlib_lib, libarchive_lib],
    cxx_toolkit,
    lib_cxx_config,
  )
  lib_dynamic = drake.cxx.DynLib(
    'lib/elle',
    sources + [zlib_lib, libarchive_lib],
    cxx_toolkit,
    lib_cxx_config,
  )

  rule_build = drake.Rule('build')
  if cxx_toolkit.os not in [drake.os.ios, drake.os.android]:
    rule_build << lib_dynamic
    library = lib_dynamic
  else:
    rule_build << lib_static
    library = lib_static

  ## ------ ##
  ## Python ##
  ## ------ ##


  if python3 is not None:
    python = []
    python_rule = drake.Rule('python')
    python3 = drake.cxx.find_library(
      'pyconfig.h',
      prefix = python3,
      include_dir = ['include',
                     'include/python3.2',
                     'include/python3.2m',
                     'include/python3.3m'])
    python_cxx_config = drake.cxx.Config(cxx_config)
    # Required by python or else the symbol _Gestalt is not found.
    if cxx_toolkit.os is drake.os.macos:
      python_cxx_config.framework_add('CoreServices')
    python_cxx_config += python3
    python_cxx_config.lib_path_runtime('../..')
    python_lib_sources = [drake.node('src/elle/log/python.cc')]
    python_cxx_config += boost_python
    python_log_lib = drake.cxx.Module(
      'lib/python/elle/_log',
      python_lib_sources + [library],
      cxx_toolkit, python_cxx_config)
    python.append(python_log_lib)

    python_sources = drake.nodes(
      'src/elle/log.py',
      'src/elle/__init__.py',
      )
    python += drake.copy(python_sources, 'lib/python', 'src')
    python_rule << python

    if cxx_toolkit.os is drake.os.windows:
      python_plugin_datetime = drake.cxx.StaticLib(
        'lib/python-datetime-bindings',
        drake.nodes('src/elle/python/datetime-converter.cc'),
        cxx_toolkit,
        python_cxx_config)
    else:
      python_plugin_datetime = drake.cxx.Module(
        'lib/python-datetime-bindings',
        drake.nodes('src/elle/python/datetime-converter.cc'),
        cxx_toolkit,
        python_cxx_config)

  # Tests

  rule_tests = drake.Rule('tests')
  rule_check = drake.TestSuite('check')

  tests = [
    'Backtrace.cc',
    'Buffer.cc',
    'Exception.cc',
    'IOStream.cc',
    'Lazy.cc',
    'Logger.cc',
    'Printable.cc',
    'TypeInfo.cc',
    # Disable valgrind because of random uuids.
    ('UUID.cc', (), False),
    'Version.cc',
    'With.cc',
    'archive.cc',
    'assert.cc',
    'cast.cc',
    'compiler.cc',
    'filesystem/TemporaryDirectory.cc',
    'finally.cc',
    'format/base64.cc',
    'format/gzip.cc',
    'format/ini/Section.cc',
    'format/json/Array.cc',
    'format/json/Bool.cc',
    'format/json/Dictionary.cc',
    'format/json/Float.cc',
    'format/json/Integer.cc',
    'format/json/Null.cc',
    'format/json/String.cc',
    'io/Path.cc',
    'io/Piece.cc',
    'json.cc',
    'memory.cc',
    'meta.cc',
    'named.cc',
    'network/hostname.cc',
    'network/interface.cc',
    'network/interface_autoip.cc',
    'operator.cc',
    'option.cc',
    'os/environ.cc',
    'print.cc',
    'printf.cc',
    'serialization.cc',
    'set.cc',
    'system/user_paths.cc',
    'unordered_map.cc',
    'utility/Suffixes.cc',
    'AtomicFile.cc',
    ]
  if cxx_toolkit.os is not drake.os.android:
    tests.extend([
      'attributes.cc',
      'log.cc',
      'threading/monitor.cc',
      'threading/rw-mutex.cc',
    ])
  process_helpers = [
    drake.cxx.Executable('tests/system/%s' % name,
                         drake.nodes('tests/system/%s.cc' % name),
                         cxx_toolkit, drake.cxx.Config())
    for name in ('true', 'false')]
  tests.extend([
    ('system/process.cc', process_helpers, True),
    ('system/process-fail.cc', process_helpers, True),
  ])

  cxx_config_tests = cxx_config + config
  cxx_config_tests.enable_debug_symbols()
  if cxx_toolkit.os == drake.os.android:
    cxx_config_tests.lib('stdc++')
    cxx_config_tests.lib('atomic')
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    cxx_config_tests += boost.config_test(static = True)
  else:
    cxx_config_tests += boost.config_test(link = False)
    cxx_config_tests.library_add(
      drake.copy(boost.test_dynamic, 'lib', strip_prefix = True))
  for test in tests:
    if isinstance(test, tuple):
      test, dependencies, valgrind_this_test = test
    else:
      dependencies = ()
      valgrind_this_test = True
    config_test = drake.cxx.Config(cxx_config_tests)
    if cxx_toolkit.os is drake.os.macos and \
        cxx_toolkit.kind is drake.cxx.GccToolkit.Kind.gcc and \
          test == 'Backtrace.cc':
      config_test.enable_optimization(False)
    config_test.lib_path_runtime('%s../lib' % ('../' * test.count('/')))
    test = drake.cxx.Executable(
      'tests/%s' % os.path.splitext(test)[0],
      drake.nodes('tests/%s' % test) + [library, zlib_lib, libarchive_lib],
      cxx_toolkit, config_test)
    for dep in dependencies:
      test.dependency_add(dep)
    rule_tests << test
    env = {
      'BUILD_DIR': str(drake.path_build()),
    }
    if valgrind_tests and valgrind_this_test:
      runner = drake.valgrind.ValgrindRunner(exe = test,
                                             valgrind = valgrind,
                                             env = env)
    else:
      runner = drake.Runner(exe = test, env = env)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  if prefix is not False:
    rule_install = drake.Rule('install')
    prefix = drake.Path(prefix)
    if cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
      rule_install << drake.install(lib_dynamic, prefix)
    rule_install << drake.install(lib_static, prefix)
    rule_install << drake.install(
      list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)),
      prefix / 'include', 'src')
