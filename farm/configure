#!/usr/bin/env python3

import os
import os.path
import shutil
import subprocess
import sys
import platform


def parse_options():
  import argparse
  parser = argparse.ArgumentParser(description = 'Create drake configuration file')
  parser.add_argument('--arch',
                      metavar = 'ARCHITECTURE',
                      type = str,
                      help = 'CPU architecture (x86_64, i386)',
                      required = True)
  parser.add_argument('--os',
                      metavar = 'OPERATING_SYSTEM',
                      type = str,
                      help = 'Target operating system',
                      required = True)
  parser.add_argument('--compiler',
                      metavar = 'COMPILER',
                      type = str,
                      help = 'Host compiler',
                      required = True)
  parser.add_argument('--project',
                      metavar = 'PROJECT',
                      type = str,
                      help = 'Project name',
                      required = True)
  parser.add_argument('--public-beyond',
                      metavar = 'PUBLIC_BEYOND',
                      type = bool,
                      help = 'Strip all credentials from beyond',
                      required = False,
                      default = False
                      )
  for d in ['build', 'install', 'source']:
    parser.add_argument('--%s-dir' % d,
                        metavar = '%s_DIR' % d.upper(),
                        type = str,
                        help = '%s directory' % d.capitalize(),
                        required = True)
  return parser.parse_args()

options = parse_options()

template = '''\
#!/usr/bin/env python3

import os
import os.path
import sys

# Add drake in the Python path.
sys.path.insert(0, os.path.realpath(%(dir_source)r '/drake/src'))

import drake
import drake.cxx
import drake.cxx.boost

os.environ.update(%(environ)r)

cxx_toolkit = drake.cxx.GccToolkit(compiler = %(compiler)r)
cxx_config = drake.cxx.Config()
cxx_config.enable_debug_symbols()
cxx_config.enable_optimization(True)
# Needed on OSX ?
# cxx_config.warnings.overloaded_virtual = False
if cxx_toolkit.os == drake.os.macos:
  cxx_config.use_local_libcxx = True

for f in %(flags)r:
  cxx_config.flag(f)

extra_args = {}

if %(os)r == 'alpine':
  # inhibit major and minor macros
  cxx_config.define('_SYS_SYSMACROS_H')

if %(os)r == 'alpine' and %(project)r == 'Filesystem':
  extra_args['enable_crash_reporting'] = False

if %(arch)r == 'arm':
  cxx_toolkit_host =  drake.cxx.GccToolkit()
  extra_args['cxx_toolkit_host'] = cxx_toolkit_host

if %(beyond_public)r and %(project)r == 'Filesystem':
  extra_args['beyond_public'] = True

if %(project)r == 'Elle':
  extra_args['enable_cryptographic_rotation'] = True

with drake.Drake(%(dir_source)r) as d:
  python = %(python)r
  import drake.valgrind
  valgrind = %(valgrind)r
  valgrind_tests = %(valgrind)r

  def drake_run(codesign = False):
    d.run(cxx_toolkit,
          cxx_config = cxx_config,
          python3 = python,
          valgrind = valgrind,
          valgrind_tests = valgrind_tests,
          production_build = %(production_build)r,
          prefix = %(dir_install)r,
          codesign = codesign,
          **extra_args)

  if cxx_toolkit.os == drake.os.macos and os.environ.get('MACMINI_KEYCHAIN_PASSWORD', None):
    with open(%(drake_utils)r, 'r') as f:
      exec(f.read(), globals(), globals())
    keychain_path = os.path.expanduser('~/AppSign.keychain')
    with Keychain(keychain_path, os.environ['MACMINI_KEYCHAIN_PASSWORD']):
      drake_run(codesign = True)
  else:
    drake_run()
'''

parameters = {
  'compiler': None,
  'environ': {},
  'flags': (),
  'boost': None,
  'boost_shared': True,
  'python': None,
  'valgrind': False,
  'production_build': True,
  'arch': options.arch,
  'os': options.os,
  'drake_utils': '%s/../drake-utils.py' % os.path.dirname(os.path.realpath(__file__)),
  'project': options.project,
}

parameters['beyond_public'] = options.public_beyond
if options.os == 'android':
  parameters['compiler'] = '/root/arm-linux-androideabi-4.8/bin/arm-linux-androideabi-g++'
  parameters['python'] = False
  parameters['valgrind'] = False
elif options.os == 'centos6':
  pass
elif options.os == 'trusty':
  parameters['valgrind'] = True
elif options.os == 'jessie':
  pass
elif options.os == 'alpine':
  parameters['environ'] = {'LC_ALL': 'C'}
elif options.os == 'osx':
  parameters['compiler'] = 'clang++'
  parameters['environ'] = {'MACOSX_DEPLOYMENT_TARGET': '10.7'}
  parameters['flags'] = ('-ftemplate-depth=512', '-stdlib=libc++')
  parameters['python'] = '/usr/local/Frameworks/Python.framework/Versions/3.4'
elif options.os == 'windows':
  parameters['compiler'] = '%s-w64-mingw32-g++' % options.arch
  parameters['flags'] = ('-gstabs',)
  parameters['boost_shared'] = False
  if options.arch == 'x86_64': # Use native python3 in order to run tests
    parameters['python'] = None # '/home/buildslave/local/python-mingw-64'
  else:
    parameters['python'] = None # '/home/buildslave/local/python-mingw-32'
else:
  raise Exception('invalid OS: %s' % options.os)

with open('%s/.drake.tmp' % options.build_dir, 'w') as drake:
  parameters['dir_source'] = os.path.realpath(options.source_dir)
  parameters['dir_install'] = os.path.realpath(options.install_dir)
  content = template % parameters
  print(content, file = drake)

build_dir = options.build_dir
tmp = '%s/.drake.tmp' % build_dir
drake = '%s/drake' % build_dir
diff = subprocess.call(['diff', '-u', drake, tmp])
shutil.move(tmp, drake)
